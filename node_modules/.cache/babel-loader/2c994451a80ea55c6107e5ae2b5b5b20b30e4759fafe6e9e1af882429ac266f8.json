{"ast":null,"code":"import _slicedToArray from \"/Users/willsegura/Documents/comercio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useReducer, useRef, useLayoutEffect, useEffect } from 'react';\nvar useRifm = function useRifm(props) {\n  var _useReducer = useReducer(function (c) {\n      return c + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    refresh = _useReducer2[1];\n  var valueRef = useRef(null);\n  var replace = props.replace,\n    append = props.append;\n  var userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support\n\n  var isDeleleteButtonDownRef = useRef(false);\n  var onChange = function onChange(evt) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (evt.target.type === 'number') {\n        console.error('Rifm does not support input type=number, use type=tel instead.');\n        return;\n      }\n      if (evt.target.type === 'date') {\n        console.error('Rifm does not support input type=date.');\n        return;\n      }\n    }\n    var eventValue = evt.target.value;\n    valueRef.current = [eventValue,\n    // eventValue\n    evt.target,\n    // input\n    eventValue.length > userValue.length,\n    // isSizeIncreaseOperation\n    isDeleleteButtonDownRef.current,\n    // isDeleleteButtonDown\n    userValue === props.format(eventValue) // isNoOperation\n    ];\n\n    if (process.env.NODE_ENV !== 'production') {\n      var formattedEventValue = props.format(eventValue);\n      if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {\n        console.warn('Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead');\n      }\n    } // The main trick is to update underlying input with non formatted value (= eventValue)\n    // that allows us to calculate right cursor position after formatting (see getCursorPosition)\n    // then we format new value and call props.onChange with masked/formatted value\n    // and finally we are able to set cursor position into right place\n\n    refresh();\n  }; // React prints warn on server in non production mode about useLayoutEffect usage\n  // in both cases it's noop\n\n  if (process.env.NODE_ENV === 'production' || typeof window !== 'undefined') {\n    useLayoutEffect(function () {\n      if (valueRef.current == null) return;\n      var _valueRef$current = _slicedToArray(valueRef.current, 5),\n        eventValue = _valueRef$current[0],\n        input = _valueRef$current[1],\n        isSizeIncreaseOperation = _valueRef$current[2],\n        isDeleleteButtonDown = _valueRef$current[3],\n        // No operation means that value itself hasn't been changed, BTW cursor, selection etc can be changed\n        isNoOperation = _valueRef$current[4];\n      valueRef.current = null; // this usually occurs on deleting special symbols like ' here 123'123.00\n      // in case of isDeleleteButtonDown cursor should move differently vs backspace\n\n      var deleteWasNoOp = isDeleleteButtonDown && isNoOperation;\n      var valueAfterSelectionStart = eventValue.slice(input.selectionStart);\n      var acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\\d/g);\n      var charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0; // Create string from only accepted symbols\n\n      var clean = function clean(str) {\n        return (str.match(props.accept || /\\d/g) || []).join('');\n      };\n      var valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart)); // trying to find cursor position in formatted value having knowledge about valueBeforeSelectionStart\n      // This works because we assume that format doesn't change the order of accepted symbols.\n      // Imagine we have formatter which adds ' symbol between numbers, and by default we refuse all non numeric symbols\n      // for example we had input = 1'2|'4 (| means cursor position) then user entered '3' symbol\n      // inputValue = 1'23'|4 so valueBeforeSelectionStart = 123 and formatted value = 1'2'3'4\n      // calling getCursorPosition(\"1'2'3'4\") will give us position after 3, 1'2'3|'4\n      // so for formatting just this function to determine cursor position after formatting is enough\n      // with masking we need to do some additional checks see `mask` below\n\n      var getCursorPosition = function getCursorPosition(val) {\n        var start = 0;\n        var cleanPos = 0;\n        for (var i = 0; i !== valueBeforeSelectionStart.length; ++i) {\n          var newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;\n          var newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1; // this skips position change if accepted symbols order was broken\n          // For example fixes edge case with fixed point numbers:\n          // You have '0|.00', then press 1, it becomes 01|.00 and after format 1.00, this breaks our assumption\n          // that order of accepted symbols is not changed after format,\n          // so here we don't update start position if other accepted symbols was inbetween current and new position\n\n          if (newCleanPos - cleanPos > 1) {\n            newPos = start;\n            newCleanPos = cleanPos;\n          }\n          cleanPos = Math.max(newCleanPos, cleanPos);\n          start = Math.max(start, newPos);\n        }\n        return start;\n      }; // Masking part, for masks if size of mask is above some value\n      // we need to replace symbols instead of do nothing as like in format\n\n      if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {\n        var start = getCursorPosition(eventValue);\n        var c = clean(eventValue.substr(start))[0];\n        start = eventValue.indexOf(c, start);\n        eventValue = \"\".concat(eventValue.substr(0, start)).concat(eventValue.substr(start + 1));\n      }\n      var formattedValue = props.format(eventValue);\n      if (append != null &&\n      // cursor at the end\n      input.selectionStart === eventValue.length && !isNoOperation) {\n        if (isSizeIncreaseOperation) {\n          formattedValue = append(formattedValue);\n        } else {\n          // If after delete last char is special character and we use append\n          // delete it too\n          // was: \"12-3|\" backspace pressed, then should be \"12|\"\n          if (clean(formattedValue.slice(-1)) === '') {\n            formattedValue = formattedValue.slice(0, -1);\n          }\n        }\n      }\n      var replacedValue = replace ? replace(formattedValue) : formattedValue;\n      if (userValue === replacedValue) {\n        // if nothing changed for formatted value, just refresh so userValue will be used at render\n        refresh();\n      } else {\n        props.onChange(replacedValue);\n      }\n      return function () {\n        var start = getCursorPosition(formattedValue); // Visually improves working with masked values,\n        // like cursor jumping over refused symbols\n        // as an example date mask: was \"5|1-24-3\" then user pressed \"6\"\n        // it becomes \"56-|12-43\" with this code, and \"56|-12-43\" without\n\n        if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {\n          while (formattedValue[start] && clean(formattedValue[start]) === '') {\n            start += 1;\n          }\n        }\n        input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);\n      };\n    });\n  }\n  useEffect(function () {\n    // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported\n    // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)\n    // there is no way I found to distinguish in onChange\n    // backspace or delete was called in some situations\n    // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239\n    var handleKeyDown = function handleKeyDown(evt) {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = true;\n      }\n    };\n    var handleKeyUp = function handleKeyUp(evt) {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = false;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  return {\n    value: valueRef.current != null ? valueRef.current[0] : userValue,\n    onChange: onChange\n  };\n};\nvar Rifm = function Rifm(props) {\n  var renderProps = useRifm(props);\n  return props.children(renderProps);\n};\nexport { Rifm, useRifm };","map":{"version":3,"names":["useReducer","useRef","useLayoutEffect","useEffect","useRifm","props","c","refresh","valueRef","replace","append","userValue","format","value","isDeleleteButtonDownRef","onChange","evt","process","env","NODE_ENV","target","type","console","error","eventValue","current","length","formattedEventValue","toLowerCase","warn","window","input","isSizeIncreaseOperation","isDeleleteButtonDown","isNoOperation","deleteWasNoOp","valueAfterSelectionStart","slice","selectionStart","acceptedCharIndexAfterDelete","search","accept","charsToSkipAfterDelete","clean","str","match","join","valueBeforeSelectionStart","substr","getCursorPosition","val","start","cleanPos","i","newPos","indexOf","newCleanPos","Math","max","mask","formattedValue","replacedValue","selectionEnd","handleKeyDown","code","handleKeyUp","document","addEventListener","removeEventListener","Rifm","renderProps","children"],"sources":["/Users/willsegura/Documents/comercio/node_modules/rifm/dist/rifm.esm.js"],"sourcesContent":["import { useReducer, useRef, useLayoutEffect, useEffect } from 'react';\n\nconst useRifm = props => {\n  const [, refresh] = useReducer(c => c + 1, 0);\n  const valueRef = useRef(null);\n  const {\n    replace,\n    append\n  } = props;\n  const userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support\n\n  const isDeleleteButtonDownRef = useRef(false);\n\n  const onChange = evt => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (evt.target.type === 'number') {\n        console.error('Rifm does not support input type=number, use type=tel instead.');\n        return;\n      }\n\n      if (evt.target.type === 'date') {\n        console.error('Rifm does not support input type=date.');\n        return;\n      }\n    }\n\n    const eventValue = evt.target.value;\n    valueRef.current = [eventValue, // eventValue\n    evt.target, // input\n    eventValue.length > userValue.length, // isSizeIncreaseOperation\n    isDeleleteButtonDownRef.current, // isDeleleteButtonDown\n    userValue === props.format(eventValue) // isNoOperation\n    ];\n\n    if (process.env.NODE_ENV !== 'production') {\n      const formattedEventValue = props.format(eventValue);\n\n      if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {\n        console.warn('Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead');\n      }\n    } // The main trick is to update underlying input with non formatted value (= eventValue)\n    // that allows us to calculate right cursor position after formatting (see getCursorPosition)\n    // then we format new value and call props.onChange with masked/formatted value\n    // and finally we are able to set cursor position into right place\n\n\n    refresh();\n  }; // React prints warn on server in non production mode about useLayoutEffect usage\n  // in both cases it's noop\n\n\n  if (process.env.NODE_ENV === 'production' || typeof window !== 'undefined') {\n    useLayoutEffect(() => {\n      if (valueRef.current == null) return;\n      let [eventValue, input, isSizeIncreaseOperation, isDeleleteButtonDown, // No operation means that value itself hasn't been changed, BTW cursor, selection etc can be changed\n      isNoOperation] = valueRef.current;\n      valueRef.current = null; // this usually occurs on deleting special symbols like ' here 123'123.00\n      // in case of isDeleleteButtonDown cursor should move differently vs backspace\n\n      const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;\n      const valueAfterSelectionStart = eventValue.slice(input.selectionStart);\n      const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\\d/g);\n      const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0; // Create string from only accepted symbols\n\n      const clean = str => (str.match(props.accept || /\\d/g) || []).join('');\n\n      const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart)); // trying to find cursor position in formatted value having knowledge about valueBeforeSelectionStart\n      // This works because we assume that format doesn't change the order of accepted symbols.\n      // Imagine we have formatter which adds ' symbol between numbers, and by default we refuse all non numeric symbols\n      // for example we had input = 1'2|'4 (| means cursor position) then user entered '3' symbol\n      // inputValue = 1'23'|4 so valueBeforeSelectionStart = 123 and formatted value = 1'2'3'4\n      // calling getCursorPosition(\"1'2'3'4\") will give us position after 3, 1'2'3|'4\n      // so for formatting just this function to determine cursor position after formatting is enough\n      // with masking we need to do some additional checks see `mask` below\n\n      const getCursorPosition = val => {\n        let start = 0;\n        let cleanPos = 0;\n\n        for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {\n          let newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;\n          let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1; // this skips position change if accepted symbols order was broken\n          // For example fixes edge case with fixed point numbers:\n          // You have '0|.00', then press 1, it becomes 01|.00 and after format 1.00, this breaks our assumption\n          // that order of accepted symbols is not changed after format,\n          // so here we don't update start position if other accepted symbols was inbetween current and new position\n\n          if (newCleanPos - cleanPos > 1) {\n            newPos = start;\n            newCleanPos = cleanPos;\n          }\n\n          cleanPos = Math.max(newCleanPos, cleanPos);\n          start = Math.max(start, newPos);\n        }\n\n        return start;\n      }; // Masking part, for masks if size of mask is above some value\n      // we need to replace symbols instead of do nothing as like in format\n\n\n      if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {\n        let start = getCursorPosition(eventValue);\n        const c = clean(eventValue.substr(start))[0];\n        start = eventValue.indexOf(c, start);\n        eventValue = `${eventValue.substr(0, start)}${eventValue.substr(start + 1)}`;\n      }\n\n      let formattedValue = props.format(eventValue);\n\n      if (append != null && // cursor at the end\n      input.selectionStart === eventValue.length && !isNoOperation) {\n        if (isSizeIncreaseOperation) {\n          formattedValue = append(formattedValue);\n        } else {\n          // If after delete last char is special character and we use append\n          // delete it too\n          // was: \"12-3|\" backspace pressed, then should be \"12|\"\n          if (clean(formattedValue.slice(-1)) === '') {\n            formattedValue = formattedValue.slice(0, -1);\n          }\n        }\n      }\n\n      const replacedValue = replace ? replace(formattedValue) : formattedValue;\n\n      if (userValue === replacedValue) {\n        // if nothing changed for formatted value, just refresh so userValue will be used at render\n        refresh();\n      } else {\n        props.onChange(replacedValue);\n      }\n\n      return () => {\n        let start = getCursorPosition(formattedValue); // Visually improves working with masked values,\n        // like cursor jumping over refused symbols\n        // as an example date mask: was \"5|1-24-3\" then user pressed \"6\"\n        // it becomes \"56-|12-43\" with this code, and \"56|-12-43\" without\n\n        if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {\n          while (formattedValue[start] && clean(formattedValue[start]) === '') {\n            start += 1;\n          }\n        }\n\n        input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);\n      };\n    });\n  }\n\n  useEffect(() => {\n    // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported\n    // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)\n    // there is no way I found to distinguish in onChange\n    // backspace or delete was called in some situations\n    // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239\n    const handleKeyDown = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = true;\n      }\n    };\n\n    const handleKeyUp = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = false;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  return {\n    value: valueRef.current != null ? valueRef.current[0] : userValue,\n    onChange\n  };\n};\nconst Rifm = props => {\n  const renderProps = useRifm(props);\n  return props.children(renderProps);\n};\n\nexport { Rifm, useRifm };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}