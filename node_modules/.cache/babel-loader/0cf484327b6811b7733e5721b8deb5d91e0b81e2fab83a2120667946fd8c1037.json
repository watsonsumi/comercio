{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nvar views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nvar viewTranslation = {\n  calendar: 'calendrier',\n  clock: 'horloge'\n};\nvar frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: function calendarViewSwitchingButtonAriaLabel(view) {\n    return view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année';\n  },\n  inputModeToggleButtonAriaLabel: function inputModeToggleButtonAriaLabel(isKeyboardInputOpen, viewType) {\n    return isKeyboardInputOpen ? \"passer du champ text au \".concat(viewTranslation[viewType]) : \"passer du \".concat(viewTranslation[viewType], \" au champ text\");\n  },\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: function clockLabelText(view, time, adapter) {\n    return \"Choix des \".concat(views[view], \". \").concat(time === null ? 'Aucune heure choisie' : \"L'heure choisie est \".concat(adapter.format(time, 'fullTime')));\n  },\n  hoursClockNumberText: function hoursClockNumberText(hours) {\n    return \"\".concat(hours, \" heures\");\n  },\n  minutesClockNumberText: function minutesClockNumberText(minutes) {\n    return \"\".concat(minutes, \" minutes\");\n  },\n  secondsClockNumberText: function secondsClockNumberText(seconds) {\n    return \"\".concat(seconds, \" secondes\");\n  },\n  // Open picker labels\n  openDatePickerDialogue: function openDatePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir la date, la date s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullDate')) : 'Choisir la date';\n  },\n  openTimePickerDialogue: function openTimePickerDialogue(rawValue, utils) {\n    return rawValue && utils.isValid(utils.date(rawValue)) ? \"Choisir l'heure, l'heure s\\xE9lectionn\\xE9e est \".concat(utils.format(utils.date(rawValue), 'fullTime')) : \"Choisir l'heure\";\n  },\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport var frFR = getPickersLocalization(frFRPickers);","map":{"version":3,"names":["getPickersLocalization","views","hours","minutes","seconds","viewTranslation","calendar","clock","frFRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","frFR"],"sources":["/Users/willsegura/Documents/GitHub/frotend-demo/node_modules/@mui/x-date-pickers/locales/frFR.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst viewTranslation = {\n  calendar: 'calendrier',\n  clock: 'horloge'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `passer du champ text au ${viewTranslation[viewType]}` : `passer du ${viewTranslation[viewType]} au champ text`,\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Choix des ${views[view]}. ${time === null ? 'Aucune heure choisie' : `L'heure choisie est ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} heures`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} secondes`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;AACvE,IAAMC,KAAK,GAAG;EACZC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE;AACX,CAAC;AACD,IAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE;AACT,CAAC;AACD,IAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,gBAAgB;EAC/BC,SAAS,EAAE,cAAc;EACzB;EACAC,gBAAgB,EAAE,0BAA0B;EAC5CC,YAAY,EAAE,wBAAwB;EACtCC,oCAAoC,EAAE,8CAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,MAAM,GAAG,oDAAoD,GAAG,oDAAoD;EAAA;EAC3KC,8BAA8B,EAAE,wCAACC,mBAAmB,EAAEC,QAAQ;IAAA,OAAKD,mBAAmB,qCAA8BX,eAAe,CAACY,QAAQ,CAAC,wBAAkBZ,eAAe,CAACY,QAAQ,CAAC,mBAAgB;EAAA;EACxM;EACAC,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE,KAAK;EACV;EACAC,iBAAiB,EAAE,SAAS;EAC5BC,gBAAgB,EAAE,OAAO;EACzBC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,aAAa;EAC/B;EACA;EACA;EACA;EACA;EACA;EACAC,cAAc,EAAE,wBAACV,IAAI,EAAEW,IAAI,EAAEC,OAAO;IAAA,2BAAkBzB,KAAK,CAACa,IAAI,CAAC,eAAKW,IAAI,KAAK,IAAI,GAAG,sBAAsB,iCAA0BC,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAC,CAAE;EAAA,CAAE;EAC1KG,oBAAoB,EAAE,8BAAA1B,KAAK;IAAA,iBAAOA,KAAK;EAAA,CAAS;EAChD2B,sBAAsB,EAAE,gCAAA1B,OAAO;IAAA,iBAAOA,OAAO;EAAA,CAAU;EACvD2B,sBAAsB,EAAE,gCAAA1B,OAAO;IAAA,iBAAOA,OAAO;EAAA,CAAW;EACxD;EACA2B,sBAAsB,EAAE,gCAACC,QAAQ,EAAEC,KAAK;IAAA,OAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,6DAAgDC,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAAA;EAChNI,sBAAsB,EAAE,gCAACJ,QAAQ,EAAEC,KAAK;IAAA,OAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,6DAAgDC,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,IAAK,iBAAiB;EAAA;EAChN;EACAK,cAAc,EAAE,kBAAkB;EAClCC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,IAAMC,IAAI,GAAGvC,sBAAsB,CAACQ,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}